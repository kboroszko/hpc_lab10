Legend:

  A   - recognized idiom
  D   - deleted loop
  I   - callee inlined here
  L   - interleaved loop
  M   - multithreaded
  P   - peeled loop
  S   - distributed loop
  U/u - completely/partially unrolled loop
  V   - vectorized loop
  X   - loop interchanged with enclosing loop
  Z   - versioned loop for LICM
  +   - additional messages below

----------

  1.                 /*
  2.                  * A template for the 2019 MPI lab at the University of Warsaw.
  3.                  * Copyright (C) 2016, Konrad Iwanicki.
  4.                  * Refactoring 2019, Łukasz Rączkowski
  5.                  */
  6.                 
  7.                 #include <iostream>
  8.                 #include <cstdlib>
  9.                 #include <cstring>
 10.                 #include <sys/time.h>
 11.                 #include <iomanip>
 12.                 #include <vector>
 13.                 #include "laplace-common.h"
 14.                 
 15.                 #define OPTION_VERBOSE "--verbose"
 16.                 
 17.                 
 18.                 static void printUsage(char const* progName) {
 19.                     std::cerr << "Usage:" << std::endl <<
 20.                                     "    " << progName << " [--verbose] <N>" << std::endl <<
 21.                                     "Where:" << std::endl <<
 22.                                     "   <N>         The number of points in each dimension (at least 2)." << std::endl <<
 23.                                     "   " << OPTION_VERBOSE << "   Prints the input and output systems." << std::endl;
 24.                 }
 25.                 
 26.                 static void freePointRow(const double* currentPointRow) {
 27.                     if (currentPointRow != nullptr) {
 28.                         delete(currentPointRow);
 29.                     }
 30.                 }
 31.                 
 32.                 static double* allocateCurrentPointRow(int numPointsPerDimension) {
 33.                     return new double[numPointsPerDimension];
 34.                 }
 35.                 
 36.                 static void freePoints(double** points, int numPointsPerDimension) {
 37.                     if (points != nullptr) {
 38.     0---------<         for (int i = 0; i < numPointsPerDimension; ++i) {
 39. +   0                       freePointRow(points[i]);
 40.     0--------->         }
 41.                 
 42.                         delete(points);
 43.                     }
 44.                 }
 45.                 
 46.                 static double** allocatePoints(int numPointsPerDimension) {
 47.                     auto points = new double*[numPointsPerDimension];
 48.                 
 49.     0---------<     for (int i = 0; i < numPointsPerDimension; ++i) {
 50.     0                   points[i] = nullptr;
 51.     0--------->     }
 52.                 
 53.     0---------<     for (int i = 0; i < numPointsPerDimension; ++i) {
 54. +   0                   points[i] = allocateCurrentPointRow(numPointsPerDimension);
 55.     0           
 56.     0                   if (points[i] == nullptr) {
 57. +   0                       freePoints(points, numPointsPerDimension);
 58.     0                       return nullptr;
 59.     0                   }
 60.     0--------->     }
 61.                 
 62.                     return points;
 63.                 }
 64.                 
 65.                 static void initializePoints(double **points, int numPointsPerDimension) {
 66.     0---------<     for (int i = 0; i < numPointsPerDimension; ++i) {
 67.     0 1-------<         for (int j = 0; j < numPointsPerDimension; ++j) {
 68.     0 1                     points[i][j] = Utils::getInitialValue(i, j, numPointsPerDimension);
 69.     0 1------->         }
 70.     0--------->     }
 71.                 }
 72.                 
 73.                 static void printPoints(double **points, int numPointsPerDimension) {
 74.     0---------<     for (int i = 0; i < numPointsPerDimension; ++i) {
 75. +   0                   std::cout << std::fixed << std::setprecision(10) << points[i][0];
 76.     0           
 77.     0 1-------<         for (int j = 1; j < numPointsPerDimension; ++j) {
 78. +   0 1                     std::cout << " " << std::fixed << std::setprecision(10) << points[i][j];
 79.     0 1------->         }
 80.     0           
 81.     0                   std::cout << std::endl;
 82.     0--------->     }
 83.                 }
 84.                 
 85.                 static InputOptions parseInput(int argc, char * argv[]) {
 86.                     int numPointsPerDimension = 0;
 87.                     bool verbose = false;
 88.                     int errorCode = 0;
 89.                 
 90.                     if (argc < 2) {
 91.                         std::cerr << "ERROR: Too few arguments!" << std::endl;
 92. +                       printUsage(argv[0]);
 93.                         errorCode = 1;
 94.                     } else if (argc > 3) {
 95.                         std::cerr << "ERROR: Too many arguments!" << std::endl;
 96. +                       printUsage(argv[0]);
 97.                         errorCode = 2;
 98.                     } else {
 99.                         int argIdx = 1;
100.                 
101.                         if (argc == 3) {
102.                             if (strncmp(argv[argIdx], OPTION_VERBOSE, strlen(OPTION_VERBOSE)) != 0) {
103.                                 std::cerr << "ERROR: Unexpected option '" << argv[argIdx] << "'!" << std::endl;
104. +                               printUsage(argv[0]);
105.                                 errorCode = 3;
106.                             }
107.                 
108.                             verbose = true;
109.                             ++argIdx;
110.                         }
111.                 
112.                         numPointsPerDimension = std::strtol(argv[argIdx], nullptr, 10);
113.                 
114.                         if (numPointsPerDimension < 2) {
115.                             fprintf(stderr, "ERROR: The number of points, '%s', should be "
116.                                             "a numeric value greater than or equal to 2!\n", argv[argIdx]);
117. +                           printUsage(argv[0]);
118.                             errorCode = 4;
119.                         }
120.                     }
121.                 
122. +                   return {numPointsPerDimension, verbose, errorCode};
123.                 }
124.                 
125.                 std::tuple<int, double> performAlgorithm(double** points, double omega, double epsilon, int numPointsPerDimension) {
126.                     double maxDiff;
127.                     int numIterations = 0;
128.                 
129.     0---------<     do {
130.     0                   maxDiff = 0.0;
131.     0           
132.     0 1-------<         for (int color = 0; color < 2; ++color) {
133.     0 1 2-----<             for (int i = 1; i < numPointsPerDimension - 1; ++i) {
134.     0 1 2 3---<                 for (int j = 1 + (i % 2 == color ? 1 : 0); j < numPointsPerDimension - 1; j += 2) {
135.     0 1 2 3                         double tmp = (points[i - 1][j] + points[i + 1][j] + points[i][j - 1] + points[i][j + 1]) / 4.0;
136.     0 1 2 3                         double diff = points[i][j];
137.     0 1 2 3     
138.     0 1 2 3                         points[i][j] = (1.0 - omega) * points[i][j] + omega * tmp;
139.     0 1 2 3                         diff = fabs(diff - points[i][j]);
140.     0 1 2 3     
141.     0 1 2 3                         if (diff > maxDiff) {
142.     0 1 2 3                             maxDiff = diff;
143.     0 1 2 3                         }
144.     0 1 2 3--->                 }
145.     0 1 2----->             }
146.     0 1------->         }
147.     0                   ++numIterations;
148.     0               }
149.     0--------->     while (maxDiff > epsilon);
150.                 
151. +                   return std::make_tuple(numIterations, maxDiff);
152.                 }
153.                 
154.                 
155.                 int main(int argc, char * argv[]) {
156.                     struct timeval startTime {};
157.                     struct timeval endTime {};
158.                 
159. +                   auto inputOptions = parseInput(argc, argv);
160.                 
161.                     if (inputOptions.getErrorCode() != 0) {
162.                         return inputOptions.getErrorCode();
163.                     }
164.                 
165.                     auto numPointsPerDimension = inputOptions.getNumPointsPerDimension();
166.                     auto isVerbose = inputOptions.isVerbose();
167.                 
168.                     double omega = Utils::getRelaxationFactor(numPointsPerDimension);
169.                     double epsilon = Utils::getToleranceValue(numPointsPerDimension);
170. +                   auto pointsPointer = allocatePoints(numPointsPerDimension);
171.                 
172.                     if (pointsPointer == nullptr) {
173. +                       freePoints(pointsPointer, numPointsPerDimension);
174.                         std::cerr << "ERROR: Memory allocation failed!" << std::endl;
175.                         return 5;
176.                     }
177.                 
178. +                   initializePoints(pointsPointer, numPointsPerDimension);
179.                 
180.                     if (gettimeofday(&startTime, nullptr)) {
181. +                       freePoints(pointsPointer, numPointsPerDimension);
182.                         std::cerr << "ERROR: Gettimeofday failed!" << std::endl;
183.                         return 6;
184.                     }
185.                 
186.                     /* Start of computations. */
187.                 
188. +                   auto result = performAlgorithm(pointsPointer, omega, epsilon, numPointsPerDimension);
189.                 
190.                     /* End of computations. */
191.                 
192.                     if (gettimeofday(&endTime, nullptr)) {
193. +                       freePoints(pointsPointer, numPointsPerDimension);
194.                         std::cerr << "ERROR: Gettimeofday failed!" << std::endl;
195.                         return 7;
196.                     }
197.                 
198.                     double duration =
199.                             ((double)endTime.tv_sec + ((double)endTime.tv_usec / 1000000.0)) -
200.                             ((double)startTime.tv_sec + ((double)startTime.tv_usec / 1000000.0));
201.                 
202.                     std::cerr << "Statistics: duration(s)="
203.                             << std::fixed
204. +                           << std::setprecision(10)
205.                             << duration << " #iters="
206. +                           << std::get<0>(result)
207.                             << " diff="
208. +                           << std::get<1>(result)
209.                             << " epsilon="
210.                             << epsilon
211.                             << std::endl;
212.                 
213.                 
214.                     if (isVerbose) {
215. +                       printPoints(pointsPointer, numPointsPerDimension);
216.                     }
217.                 
218. +                   freePoints(pointsPointer, numPointsPerDimension);
219.                     return 0;
220.                 }

----------

 39. _ZL12freePointRowPKd not inlined into _ZL10freePointsPPdi because it should never be inlined (cost=never): no alwaysinline attribute

 54. _ZL23allocateCurrentPointRowi not inlined into _ZL14allocatePointsi because it should never be inlined (cost=never): no alwaysinline attribute

 57. _ZL10freePointsPPdi not inlined into _ZL14allocatePointsi because it should never be inlined (cost=never): no alwaysinline attribute

 75. _ZSt12setprecisioni not inlined into _ZL11printPointsPPdi because it should never be inlined (cost=never): no alwaysinline attribute

 78. _ZSt12setprecisioni not inlined into _ZL11printPointsPPdi because it should never be inlined (cost=never): no alwaysinline attribute

 92. _ZL10printUsagePKc not inlined into _ZL10parseInputiPPc because it should never be inlined (cost=never): no alwaysinline attribute

 96. _ZL10printUsagePKc not inlined into _ZL10parseInputiPPc because it should never be inlined (cost=never): no alwaysinline attribute

104. _ZL10printUsagePKc not inlined into _ZL10parseInputiPPc because it should never be inlined (cost=never): no alwaysinline attribute

117. _ZL10printUsagePKc not inlined into _ZL10parseInputiPPc because it should never be inlined (cost=never): no alwaysinline attribute

122. _ZN12InputOptionsC2Eibi not inlined into _ZL10parseInputiPPc because it should never be inlined (cost=never): no alwaysinline attribute

151. _ZSt10make_tupleIJRiRdEESt5tupleIJDpNSt17__decay_and_stripIT_E6__typeEEEDpOS4_ not inlined into _Z16performAlgorithmPPdddi because it should never be inlined (cost=never): no alwaysinline attribute

159. _ZL10parseInputiPPc not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

170. _ZL14allocatePointsi not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

173. _ZL10freePointsPPdi not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

178. _ZL16initializePointsPPdi not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

181. _ZL10freePointsPPdi not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

188. _Z16performAlgorithmPPdddi not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

193. _ZL10freePointsPPdi not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

204. _ZSt12setprecisioni not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

206. _ZSt3getILm0EJidEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS4_ not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

208. _ZSt3getILm1EJidEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS4_ not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

215. _ZL11printPointsPPdi not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute

218. _ZL10freePointsPPdi not inlined into main because it should never be inlined (cost=never): no alwaysinline attribute
